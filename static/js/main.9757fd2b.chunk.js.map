{"version":3,"sources":["assets/snake.png","config.js","Store/actions/auth.js","Store/actions/actionTypes.js","Store/actions/game.js","Components/UI/TopBar/TopBar.js","Components/UI/Setting/Setting.js","Components/Settings/Settings.js","Components/Board/LoseScreen/LoseScreen.js","Components/Board/Controls/Controls.js","Components/Board/Board.js","Components/Auth/Inputs/Inputs.js","Components/UI/Spinner/Spinner.js","Components/Auth/Auth.js","Components/Scoreboard/Scoreboard.js","App.js","serviceWorker.js","Store/reducers/gameReducer.js","Store/reducers/authReducer.js","index.js"],"names":["module","exports","mapValues","LOGIN","CREATE_USER","AUTO_LOGIN","GET_GAMEMODES","GET_SCOREBOARD","POST_SCORE","val","loginError","error","type","loginRefresh","dispatch","setTimeout","autoLogin","verify","auth","jsonData","router","fetch","config","method","headers","body","then","res","json","username","access","refresh","localStorage","setItem","replace","Object","entries","map","el","join","location","enteredPath","pathname","getItem","JSON","stringify","code","redirectToSettings","catch","changeMode","mode","newGameMode","mapDispatchToProps","logout","removeItem","withRouter","connect","state","gameMode","game","props","className","onClick","history","Setting","keys","options","children","Fragment","key","id","name","onChange","change","defaultChecked","option","checkedValue","htmlFor","toUpperCase","Settings","render","small","medium","large","board","value","setSetting","border","standard","accelerating","constant","acceleration","slow","normal","fast","speed","to","Component","setting","LoseScreen","highscore","Controls","controls","Board","snake","X","Y","snakeLength","tailPositions","pointPosition","gameOver","highscoreResponse","componentDidMount","window","addEventListener","points","timeoutID","actionFunc","componentDidUpdate","clearTimeout","componentWillUnmount","move","direction","controlsLock","width","height","setState","document","querySelectorAll","forEach","style","pointerEvents","headPosition","push","slice","i","length","e","exit","Math","floor","random","score","err","console","log","Array","_","j","tileClass","cord","split","Number","Inputs","authData","placeholder","onKeyDown","login","spinner","Auth","password","path","refs","loginMode","classList","toggle","inputChanged","event","target","changeLoginMode","ref","signin","signup","loading","errors","test","Scoreboard","activeGameMode","scoreboard","allScoreboards","getAllScoreboards","getScoreboard","isEqual","gameModesRange","nextGameMode","record","user","App","bannerPosition","LogoImage","remove","add","alt","src","autoLoginLoading","TransitionGroup","component","React","CSSTransition","classNames","timeout","enter","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","gameReducer","authReducer","store","createStore","applyMiddleware","thunk","app","basename","process","ReactDOM","getElementById","URL","href","origin","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9757fd2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snake.266d8a41.png\";","import { mapValues } from 'lodash'\r\n\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\n\r\nconst developmentUrl = 'http://127.0.0.1:8000'\r\nconst productionUrl = 'https://snake-rest-api.herokuapp.com'\r\n\r\nconst urls = {\r\n    LOGIN: '/api/token/',\r\n    CREATE_USER: '/api/users/',\r\n    AUTO_LOGIN: '/api/token/refresh/',\r\n    GET_GAMEMODES: '/api/gamemodes',\r\n    GET_SCOREBOARD: '/api/scores?id=',\r\n    POST_SCORE: '/api/scores'\r\n}\r\n\r\nexport default mapValues( urls, val => isProduction ? productionUrl + val : developmentUrl + val )","import * as actionTypes from './actionTypes'\nimport config from '../../config'\n\nconst authStart = () => ({\n    type: actionTypes.START_AUTH\n})\n\nconst loginResponse = ({ access, refresh }, username ) => ({\n    type: actionTypes.LOGIN_SUCCESS,\n    access,\n    refresh,\n    username\n})\n\nconst autoLoginResponse = access => ({\n    type: actionTypes.AUTO_LOGIN_RESPONSE,\n    access\n})\n\nconst autoLoginFail = () => ({\n    type: actionTypes.AUTO_LOGIN_FAIL\n})\n\nconst loginError = error => ({\n    type: actionTypes.LOGIN_ERROR,\n    error\n})\n\nconst loginRefresh = () => dispatch => {\n    setTimeout(() => {\n        dispatch( autoLogin() )\n    }, 104400000 )\n}\n\nexport const logout = router => {\n    router.replace('/auth')\n    localStorage.removeItem('refresh')\n    return { type: actionTypes.LOGOUT }\n}\n\nconst verify = ( auth, jsonData, router ) => dispatch => {\n    fetch( config.LOGIN, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: jsonData\n    })\n    .then( res => res.json() )\n    .then( res => {\n        if( res.access && res.refresh ) {\n            localStorage.setItem('username', auth.username)\n            localStorage.setItem('refresh', res.refresh)\n            dispatch( loginResponse( res, auth.username ))\n            router.replace('/settings')\n        }\n        else dispatch( loginError( Object.entries( res ).map( el => el.join(': ')) ))\n    })\n}\n\nexport const login = ({ auth, path }, router) => dispatch => {\n    dispatch( authStart() )\n    const jsonData = JSON.stringify(auth)\n\n    if ( path === 'verifyPassword') dispatch( verify( auth, jsonData, router ))\n    else if( path === 'signupNewUser' ) {\n        const errors = []\n        const validChars = /^[0-9a-zA-Z]+$/\n        if ( auth.username.length < 4 )         errors.push('Nickname to short!')\n        else if ( auth.username.length > 14 )   errors.push('Nickname to long!')\n        if ( !validChars.test(auth.username) )  errors.push('Invalid characters!')\n\n        if( errors.length ) return dispatch( loginError( errors )) \n\n        fetch( config.CREATE_USER, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: jsonData\n        })\n        .then( res => res.json() )\n        .then( res => {\n            if( res.username === auth.username ) dispatch( verify( auth, jsonData, router ))\n            else {\n                const errors = Object.entries( res ).map( el => el.join(': '))\n                dispatch( loginError( errors ))\n                dispatch( loginRefresh() )\n            }\n        })\n    }\n}\n\nexport const autoLogin = router => dispatch => {\n    if( router.location ) var enteredPath = router.location.pathname\n    router.replace('/')\n    \n    const refresh = localStorage.getItem('refresh')\n    if( !refresh && router ) {\n        dispatch( autoLoginFail())\n        router.replace('/auth')\n    }\n    else {\n        fetch( config.AUTO_LOGIN, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ refresh })\n        })\n        .then( res => res.json() )\n        .then( res => {\n            if( res.code === 'token_not_valid' && router ) {\n                dispatch( autoLoginFail())\n                router.replace('/auth')\n            }\n            else if( res.access ) {\n                dispatch( autoLoginResponse( res.access ))\n                dispatch( loginRefresh() )\n                const redirectToSettings = enteredPath === '/' || enteredPath === '/game' || enteredPath === '/auth'\n                if( router.location && redirectToSettings ) router.replace('/settings')\n                else router.replace( enteredPath )\n            }\n        })\n        .catch(() => {\n            dispatch( autoLoginFail())\n            router.replace('/auth')\n        })\n    }\n}","//AUTH\nexport const START_AUTH = 'START_AUTH'\nexport const LOGOUT = 'LOGOUT'\nexport const AUTO_LOGIN_FAIL = 'AUTO_LOGIN_FAIL'\nexport const AUTO_LOGIN_RESPONSE = 'AUTO_LOGIN_RESPONSE'\nexport const LOGIN_ERROR = 'LOGIN_ERROR'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\n//GAME\nexport const SET_SETTING = 'SET_SETTING'\nexport const CHANGE_MODE = 'CHANGE_MODE'","import * as actionTypes from './actionTypes'\n\nexport const setSetting = ( setting, value ) => ({\n    type: actionTypes.SET_SETTING,\n    setting, value\n})\n\nexport const changeMode = mode => ({\n    type: actionTypes.CHANGE_MODE,\n    newGameMode: mode\n})","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nimport { logout } from '../../../Store/actions/auth'\n\nimport './TopBar.css'\n\nconst TopBar = props => \n    <div className='TopBar'>\n        <div>{\n            props.auth.access \n            ? <>\n                {props.auth.username + ' | '}\n                <span \n                    className='offline'\n                    onClick={() => props.logout(props.history)}\n                >LOGOUT</span>\n              </>\n            : <span \n                className='login'\n                onClick={() => props.logout(props.history)}\n              >LOGIN</span>\n        }</div>\n    </div>\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    gameMode: state.game\n})\n\nconst mapDispatchToProps = { logout }\n\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )( TopBar ))","import React from 'react'\n\nconst Setting = ( props ) => {\n    let keys = Object.keys( props.options )\n    const check = option => JSON.stringify( props.checkedValue ) === JSON.stringify( option )\n    return (\n        <div>\n            <p>{ props.children }</p>\n            { keys.map( el => (\n                <React.Fragment key={ el }>\n                    <input type='radio' id={ el } name={ keys.join(',') }\n                        onChange={ () => { props.change( props.options[ el ] )}} \n                        defaultChecked={ check( props.options[ el ] )}/>\n                    <label htmlFor={ el }> { el.toUpperCase() } </label>\n                </React.Fragment>\n            ))}\n        </div>\n    )\n}\n\nexport default Setting","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, withRouter } from 'react-router-dom'\n\nimport './Settings.css'\n\nimport Setting from '../UI/Setting/Setting'\nimport { setSetting } from '../../Store/actions/game'\n\nclass Settings extends Component {\n    render = () =>\n        <div className='flag'>\n            <div className='Settings'>\n                <Setting options={{ small: '20x15',\n                                    medium: '30x23',\n                                    large: '40x30' }}\n                            checkedValue={ this.props.board }\n                            change={ value  => this.props.setSetting( 'board', value )}\n                > PICK BOARD SIZE: </Setting>\n                <Setting options={{ border: true, \n                                    standard: false }} \n                            checkedValue={ this.props.border }\n                            change={ value  => this.props.setSetting( 'border', value )}\n                > SELECT BORDER MODE: </Setting>\n                <Setting options={{ accelerating: true,\n                                    constant: false }}\n                            checkedValue={ this.props.acceleration }\n                            change={ value  => this.props.setSetting( 'acceleration', value )}\n                > SET SPEED MODE: </Setting>\n                <Setting options={{ slow: 240,\n                                    normal: 160,\n                                    fast: 80 }} \n                            checkedValue={ this.props.speed }\n                            change={ value  => this.props.setSetting( 'speed', value )}\n                > CHOOSE SPEED: </Setting>\n                <br/><br/>\n                <Link to='/game' className='Button startButton' > START </Link>\n                { this.props.auth ?\n                    <Link to='/scoreboard' className='Button startButton'> SCOREBOARD </Link>\n                    :null\n                }\n            </div>\n        </div>\n}\n\nconst mapStateToProps = state => ({\n    acceleration: state.game.acceleration,\n    board: state.game.board,\n    border: state.game.border,\n    speed: state.game.speed,\n    auth: state.auth.access\n})\n\nconst mapDispatchToProps = { setSetting }\n\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )( Settings ) )","import React from 'react'\nimport './LoseScreen.css'\n\nconst LoseScreen = props =>\n    <div className='shadow'>\n        <div className='gameOver'>{ (!props.auth && \"Game Over!\" ) || props.highscore || \"Wait...\" }</div>\n    </div>\n\nexport default LoseScreen","import React from 'react'\nimport './Controls.css'\n\nconst Controls = props =>\n    <div className='controlPanel'>\n        <div className='up arrow' onClick={()=>props.controls('n')}></div>\n        <div className='arrow' onClick={()=>props.controls('w')}></div>\n        <div className='right arrow' onClick={()=>props.controls('e')}></div>\n        <div className='down arrow' onClick={()=>props.controls('s')}></div>\n    </div>\n\nexport default Controls","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport config from '../../config'\nimport './Board.css'\n\nimport LoseScreen from './LoseScreen/LoseScreen'\nimport Controls from './Controls/Controls'\n\nclass Board extends Component {\n    constructor( props ) {\n        super( props )\n        const [ width, height ] = props.gameMode.board.split('x').map( i => Number(i) )\n        this.board = { width, height }\n        this.speed = props.gameMode.speed\n        this.acceleration = props.gameMode.acceleration\n        this.border = props.gameMode.border\n        this.timeoutID = 0\n        this.controlsLock = false\n        this.direction = 'e'\n    }\n\n    state = {\n        snake: {\n            X: 13,\n            Y: 10,\n            snakeLength: 2,\n        },\n        tailPositions: ['12,10','13,10'],\n        pointPosition: null,\n        gameOver: false,\n        highscoreResponse: null\n    }\n\n    componentDidMount = () => {\n        window.addEventListener( 'keydown', this.controls )\n        this.points()\n        setTimeout( () => this.timeoutID = setTimeout( this.actionFunc, this.speed ), 500)\n    }\n\n    componentDidUpdate = () => this.state.gameOver ? clearTimeout( this.timeoutID ) : null\n\n    componentWillUnmount = () => clearTimeout( this.timeoutID )\n\n    actionFunc = () => {\n        this.timeoutID = setTimeout( this.actionFunc, this.speed )\n        this.move( this.state.snake, this.direction )\n        this.game( this.state.snake, this.state.tailPositions )\n        this.controlsLock = false\n    }\n    \n    move = ({ X, Y, snakeLength }, direction ) => {\n        if( direction === 'n' ) Y--\n        if( direction === 's' ) Y++\n        if( direction === 'e' ) X++\n        if( direction === 'w' ) X--\n    \n        if( this.border && (X >= this.board.width || X < 0 || Y >= this.board.height || Y < 0))\n            this.gameOver()\n        else{\n            if( X < 0 ) X=this.board.width-1\n            if( Y < 0 ) Y=this.board.height-1\n            if( X > this.board.width-1 ) X=0\n            if( Y > this.board.height-1 ) Y=0\n        }\n        this.setState(() => ({ snake:{ X, Y, snakeLength }}))\n    }\n    \n    game = ({ X, Y, snakeLength }, tailPositions) => {\n        document.querySelectorAll('.arrow').forEach( el => el.style.pointerEvents = 'auto' )\n\n        let headPosition = X +','+ Y\n        tailPositions.push( headPosition )\n        tailPositions = tailPositions.slice( -snakeLength )\n        this.setState(() => ({ tailPositions }))\n\n        for( let i=0; i<tailPositions.length-1; i++ ){\n            if( headPosition === tailPositions[i] ) this.gameOver()\n        }\n\n        if( headPosition === this.state.pointPosition ){\n            snakeLength += 1\n            this.setState(() => ({ snake: { X, Y, snakeLength }}))\n            if( this.acceleration && this.speed>=16 ) this.speed -= 2\n            this.points()\n        }\n    }\n    \n    controls = ( e ) => {\n        if( this.controlsLock ) return\n        this.controlsLock = true\n        document.querySelectorAll('.arrow').forEach( el => el.style.pointerEvents = 'none' )\n        if(( e.key==='w'||e.key==='W'||e.key==='ArrowUp'||e==='n' ) && this.direction!=='s' ) this.direction = 'n'\n        if(( e.key==='s'||e.key==='S'||e.key==='ArrowDown'||e==='s' ) && this.direction!=='n' ) this.direction = 's'\n        if(( e.key==='d'||e.key==='D'||e.key==='ArrowRight'||e==='e' ) && this.direction!=='w' ) this.direction = 'e'\n        if(( e.key==='a'||e.key==='A'||e.key==='ArrowLeft'||e==='w' ) && this.direction!=='e' ) this.direction = 'w'\n    }\n    \n    points = () => {\n        let exit = false,\n            pointPosition = Math.floor(Math.random()*this.board.width) +','+ Math.floor(Math.random()*this.board.height)\n        this.state.tailPositions.forEach( el => { if( pointPosition === el ) { this.points(); exit = true }})\n        if( exit ) return\n        this.setState(() => ({ pointPosition }))\n    }\n    \n    gameOver = () => {\n        this.setState(() => ({gameOver: true}))\n        if( this.props.auth.access ) {\n            fetch( config.POST_SCORE, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.props.auth.access}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ score: this.state.snake.snakeLength-2, ...this.props.gameMode })\n            })\n            .then( res => res.json() )\n            .then( res => this.setState({ highscoreResponse: res }))\n            .catch( err => console.log( err ))\n        }\n    }\n    \n    render = () =>\n        <div className='flag'>\n            <div className='holder'>\n                <div className='Board'>\n                    <div className={ this.border ? 'border' : 'border-less' }>\n                        { [...Array(this.board.width)]\n                            .map(( _, i ) =>\n                                <div className='col' key={ i }>\n                                {[...Array(this.board.height)]\n                                    .map(( _, j ) => {\n                                        let tileClass = 'tile',\n                                            cord = i+','+j\n                                        this.state.tailPositions.forEach( el => { if( el === cord ) tileClass = 'snake tile' })\n                                        if(this.state.pointPosition === cord) tileClass = 'point tile'\n                                        return <div className={ tileClass } key={ cord }></div>\n                                    })\n                                }</div>\n                            )\n                        }\n                        { this.state.gameOver ? <LoseScreen highscore={this.state.highscoreResponse} auth={this.props.auth.access}/> : null }\n                    </div>\n                </div>\n                <div className='bottom'>\n                    <span>SCORE: { this.state.snake.snakeLength-2 }</span>\n                    <Link to='/settings' className='Button reset'>RESET</Link>\n                </div>\n            </div>\n            <Controls controls={ this.controls }/>\n        </div>\n}\n\nconst mapStateToProps = state => ({\n    gameMode: state.game, \n    auth: state.auth\n})\n\nexport default withRouter( connect( mapStateToProps )( Board ) )","import React from 'react'\n\nconst Inputs = props =>\n    Object.keys( props.authData ).map( key =>\n        <React.Fragment key={ key }>\n            <input \n                id={ key }\n                placeholder={ key } \n                value={ props.authData[key] }\n                type={ key === 'password' ? 'password' : 'text' }\n                onChange={ e => props.change( e, key )}\n                onKeyDown={ e => e.key === 'Enter' && props.login() }\n            />\n            <label htmlFor={ key }>{ key }</label>\n        </React.Fragment>\n    )\nexport default Inputs","import React from 'react'\nimport './Spinner.css'\n\nconst spinner = () => <div className='loader'></div>\n\nexport default spinner","import React, { Component } from 'react'\n\nimport { connect } from 'react-redux'\nimport { withRouter, Link } from 'react-router-dom'\nimport { login } from '../../Store/actions/auth'\n\nimport './Auth.css'\n\nimport Setting from '../UI/Setting/Setting'\nimport Inputs from './Inputs/Inputs'\nimport Spinner from '../UI/Spinner/Spinner'\n\nclass Auth extends Component {\n    state = {\n        auth: {\n            username: this.props.username || '',\n            password: '',\n        },\n        path: !this.props.username ? 'signupNewUser' : 'verifyPassword'\n    }\n\n    componentDidMount = () => {\n        if( !this.props.username ) this.refs.loginMode.classList.toggle('active')\n    }\n\n    inputChanged = ( event, key ) => this.setState({ auth: {...this.state.auth, [key]: event.target.value }})\n\n    changeLoginMode = path => {\n        this.setState({ path })\n        this.refs.loginMode.classList.toggle('active')\n    }\n\n    login = () => this.props.login( this.state, this.props.history )\n\n    render = () =>\n        <div className='flag'>\n            <div className='Auth'>\n                <div ref='loginMode' className='toggler'>\n                    <Setting options={{ signin: 'verifyPassword',\n                                        signup: 'signupNewUser' }} \n                            checkedValue={ this.state.path }\n                            change={ path => this.changeLoginMode(path) }\n                    />\n                </div>\n                <Inputs authData={ this.state.auth } change={ this.inputChanged } login={ this.login }/>\n\n                <button onClick={ this.login }> LOGIN </button>\n                <Link to='/settings' className='offline'> OFFLINE </Link>\n            { this.props.loading ? <Spinner/> : null }\n            </div>\n            { this.props.errors\n                ? <div className='error'> Something went wrong!{ this.props.errors.map( err => <div key={err}>{err}</div> ) }</div>\n                : null\n            }\n        </div>\n}\n\nconst mapStateToProps = state => ({\n    username: state.auth.username,\n    errors: state.auth.errors,\n    loading: state.auth.loading\n})\n\nconst mapDispatchToProps = { login }\n\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )( Auth ) )","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { isEqual } from 'lodash'\n\nimport config from '../../config'\nimport { changeMode } from '../../Store/actions/game'\n\nimport './Scoreboard.css'\n\nimport Spinner from '../UI/Spinner/Spinner'\n\nclass Scoreboard extends Component {\n    state = {\n        activeGameMode: -1,\n        scoreboard: [],\n        allScoreboards: [],\n        loading: true\n    }\n\n    componentDidMount = () => {\n        this.getAllScoreboards()\n    }\n    \n    getScoreboard = activeGameMode =>\n        fetch( config.GET_SCOREBOARD + this.state.allScoreboards[activeGameMode].id, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${this.props.auth.access}`,\n                'Content-Type': 'application/json'\n            }\n        })\n        .then( res => res.json() )\n        .then( res => this.setState({ scoreboard: res, loading: false, activeGameMode }) )\n    \n    getAllScoreboards = () =>\n        fetch( config.GET_GAMEMODES, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${this.props.auth.access}`,\n                'Content-Type': 'application/json'\n            }\n        })\n        .then( res => res.json() )\n        .then( allScoreboards => {\n            allScoreboards = allScoreboards.map(({ id, ...gameMode }) => ({ id, gameMode }))\n            this.setState(() => ({ allScoreboards }))\n            let activeGameMode = -1\n            allScoreboards.forEach(( scoreboard, i ) =>\n                isEqual( scoreboard.gameMode, this.props.gameMode ) ? activeGameMode = i : null\n            )\n            if( activeGameMode === -1 ) this.setState({ loading: false })\n            else this.getScoreboard( activeGameMode )\n        })\n    \n    changeMode = direction => {\n        const gameModesRange = this.state.allScoreboards.length - 1\n        if( gameModesRange > 0 ) {\n            this.setState({ loading: true })\n            let nextGameMode  = this.state.activeGameMode + direction\n            if( nextGameMode < 0 ) nextGameMode = gameModesRange\n            if( nextGameMode > gameModesRange ) nextGameMode = 0\n            this.getScoreboard( nextGameMode )\n            this.props.changeMode( this.state.allScoreboards[nextGameMode].gameMode )\n        }\n    }\n    \n    render = () => \n        <div className='holder'>\n            <div className='Scoreboard'>\n                <p>{ \n                    !this.state.loading \n                    && this.state.activeGameMode !== -1 \n                    && '#' + this.state.allScoreboards[this.state.activeGameMode].id \n                }</p>\n                <div className='scoreList'>\n                { this.state.loading\n                    ? <Spinner/>\n                    : this.state.activeGameMode === -1\n                        ? <>\n                            <div>Scoreboard does not exist yet!</div>\n                            <div>Play game in this mode to create scoreboard!</div>\n                          </>\n                        : this.state.scoreboard.map(( record, i ) =>\n                            <div key={ record.user }\n                            className={ this.props.auth.username === record.user ? 'record userRecord' : 'record'}>\n                                <div className='sides'>{i+1+'.'}</div>\n                                <div className='nick'>{ record.user }</div>\n                                <div className='sides'>{ record.score }</div>\n                            </div>)\n                }</div>\n            </div>\n            <div className='modeNavigation'>\n                {this.state.allScoreboards.length ? <div onClick={() => this.changeMode(-1) }></div> : null}\n                <Link to='/settings' className='Button back'>GAME MODES</Link>\n                {this.state.allScoreboards.length ? <div onClick={() => this.changeMode(1) }></div> : null}\n            </div>\n        </div>\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    gameMode: state.game\n})\n\nconst mapDispatchToProps = { changeMode }\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Scoreboard )","import React, { Component } from 'react'\nimport { Route, withRouter, Switch } from 'react-router-dom'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport { connect } from 'react-redux'\n\nimport './App.css'\nimport snake from './assets/snake.png'\n\nimport { autoLogin } from './Store/actions/auth'\nimport { changeMode } from './Store/actions/game'\n\n\nimport TopBar from './Components/UI/TopBar/TopBar'\nimport Settings from './Components/Settings/Settings'\nimport Board from './Components/Board/Board'\nimport Auth from './Components/Auth/Auth'\nimport Scoreboard from './Components/Scoreboard/Scoreboard'\nimport Spinner from './Components/UI/Spinner/Spinner'\n\nclass App extends Component {\n  componentDidMount = () => {\n    this.bannerPosition()\n    this.props.autoLogin( this.props.history )\n  }\n\n  componentDidUpdate = () => this.bannerPosition()\n\n  bannerPosition = () => {\n    if( this.props.location.pathname !== '/auth' ) this.refs.LogoImage.classList.remove('center')\n    if( this.props.location.pathname === '/game' ) this.refs.LogoImage.classList.add('dock')\n    else this.refs.LogoImage.classList.remove('dock')\n  }\n\n  render = () => \n    <>\n      { this.props.location.pathname !== '/auth' && <TopBar auth={this.props.auth} /> }\n      <div ref='LogoImage' className='banner center'>\n        <h1>\n          <img alt='snake' src={ snake }/>\n        </h1>\n      </div>\n      { this.props.autoLoginLoading \n      ? <Spinner/>\n      : <TransitionGroup component={ React.Fragment }>\n          <CSSTransition\n            key={ this.props.location.key }\n            classNames='route'\n            timeout={{ enter: 600,   exit: 300 }}>\n            <Switch location={ this.props.location }>\n                <Route path='/game'       component={ Board } />\n                <Route path='/scoreboard' component={ Scoreboard } />\n                <Route path='/settings'   component={ Settings } />\n                <Route path='/auth'       component={ Auth } />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n      }\n    </>\n}\n\nconst mapStateToProps = state => ({\n  autoLoginLoading: state.auth.autoLoginLoading\n})\n\nconst mapDispatchToProps = { autoLogin, changeMode }\n\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )( App ))","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n  \r\nexport default function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n\r\n        if (publicUrl.origin !== window.location.origin) return\r\n  \r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                    'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            }\r\n            else registerValidSW(swUrl, config)\r\n        })\r\n    }\r\n}\r\n  \r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker.register(swUrl)\r\n    .then(registration => {\r\n        registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing\r\n            if (installingWorker == null) {\r\n                return\r\n            }\r\n            installingWorker.onstatechange = () => {\r\n                if (installingWorker.state === 'installed') {\r\n                    if (navigator.serviceWorker.controller) {\r\n                        // At this point, the updated precached content has been fetched,\r\n                        // but the previous service worker will still serve the older\r\n                        // content until all client tabs are closed.\r\n                        console.log(\r\n                        'New content is available and will be used when all ' +\r\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                        )\r\n  \r\n                        // Execute callback\r\n                        if (config && config.onUpdate) {\r\n                            config.onUpdate(registration)\r\n                        }\r\n                    }\r\n                    else {\r\n                        // At this point, everything has been precached.\r\n                        // It's the perfect time to display a\r\n                        // \"Content is cached for offline use.\" message.\r\n                        console.log('Content is cached for offline use.')\r\n    \r\n                        // Execute callback\r\n                        if (config && config.onSuccess) {\r\n                            config.onSuccess(registration)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n    .catch(error => console.error('Error during service worker registration:', error))\r\n}\r\n  \r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, { headers: { 'Service-Worker': 'script' }})\r\n    .then(response => {\r\n        const contentType = response.headers.get('content-type')\r\n        if (\r\n            response.status === 404 ||\r\n            (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n            navigator.serviceWorker.ready.then(registration => {\r\n                registration.unregister().then(() => {\r\n                    window.location.reload()\r\n                })\r\n            })\r\n        }\r\n        else registerValidSW(swUrl, config)\r\n    })\r\n    .catch(() => console.log('No internet connection found. App is running in offline mode.'))\r\n}","import * as actions from '../actions/actionTypes'\n\nconst initialState = {\n    acceleration: false,\n    board: '30x23',\n    border: false,\n    speed: 160\n}\n\nconst reducer = ( state = initialState, action ) => {\n    switch( action.type ) {\n        case actions.SET_SETTING:   return{ ...state, [action.setting]: action.value }\n        case actions.CHANGE_MODE:   return{ ...action.newGameMode }\n        default: return state\n    }\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    access: null,\n    refresh: localStorage.getItem('refresh'),\n    username: localStorage.getItem('username'),\n    errors: null,\n    loading: false,\n    autoLoginLoading: true\n}\n\nconst reducer = ( state = initialState, action ) => {\n    switch( action.type ){\n        case actionTypes.START_AUTH:            return { ...state, loading: true }\n        case actionTypes.LOGOUT:                return { ...state, access: null, refresh: null }\n        case actionTypes.AUTO_LOGIN_FAIL:       return { ...state, autoLoginLoading: false }\n        case actionTypes.AUTO_LOGIN_RESPONSE:   return { ...state, autoLoginLoading: false, access: action.access }\n        case actionTypes.LOGIN_ERROR:           return { ...state, loading: false, errors: action.error }\n        case actionTypes.LOGIN_SUCCESS:         return { access: action.access,\n                                                        refresh: action.refresh, \n                                                        username: action.username,\n                                                        errors: null, \n                                                        loading: false }\n        default: return state\n    }\n}\n\nexport default reducer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\n\nimport registerServiceWorker from './serviceWorker'\n\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport gameReducer from './Store/reducers/gameReducer'\nimport authReducer from './Store/reducers/authReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n    auth: authReducer\n})\n\nconst store = createStore( rootReducer, composeEnhancers( applyMiddleware( thunk )))\n\nconst app = (\n    <Provider store={ store }>\n        <BrowserRouter basename={ process.env.PUBLIC_URL }>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\nReactDOM.render( app, document.getElementById('root'))\n\nregisterServiceWorker()"],"sourceRoot":""}